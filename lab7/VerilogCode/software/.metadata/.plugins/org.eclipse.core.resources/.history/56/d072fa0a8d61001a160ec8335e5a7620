typedef unsigned int uint32_t;
typedef struct
{
	uint32_t volatile data;
	uint32_t volatile direction;
	uint32_t volatile interruptmask;
	uint32_t volatile edgecapture;
	uint32_t volatile outset;
	uint32_t volatile outclear;
}NIOS_PIO_LED;

typedef struct
{
	uint32_t volatile data;
	uint32_t volatile direction;
	uint32_t volatile interruptmask;
	uint32_t volatile edgecapture;
	uint32_t volatile outset;
	uint32_t volatile outclear;
}NIOS_PIO_AKEY;
typedef struct
{
	uint32_t volatile data;
	uint32_t volatile direction;
	uint32_t volatile interruptmask;
	uint32_t volatile edgecapture;
	uint32_t volatile outset;
	uint32_t volatile outclear;
}NIOS_PIO_ARESET;
typedef struct
{
	uint32_t volatile data;
	uint32_t volatile direction;
	uint32_t volatile interruptmask;
	uint32_t volatile edgecapture;
	uint32_t volatile outset;
	uint32_t volatile outclear;
}NIOS_PIO_SW;



int main()
{
	//int i = 0;
	NIOS_PIO_LED* LED_PIO= (NIOS_PIO_LED*)0x90; //make a pointer to access the LED PIO block
	NIOS_PIO_ARESET* ARESET = (NIOS_PIO_ARESET*)x060; //pointer to accumulate key

	LED_PIO->data = 0; //clear all LEDs
	while ( (1+1) != 3) //infinite loop
	{
		if(ARESET->data == 0x0001)
		{
			LED_PIO->data |= 0x1; //set LSB
		}

		/*for (i = 0; i < 100000; i++); //software delay
		LED_PIO->data |= 0x1; //set LSB
		for (i = 0; i < 100000; i++); //software delay
		LED_PIO->data &= ~0x1; //clear LSB */
	}
	return 1; //never gets here
}
